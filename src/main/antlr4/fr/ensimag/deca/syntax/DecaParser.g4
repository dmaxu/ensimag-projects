parser grammar DecaParser;

options {
    // Default language but name it anyway
    //
    language  = Java;

    // Use a superclass to implement all helper
    // methods, instance variables and overrides
    // of ANTLR default methods, such as error
    // handling.
    //
    superClass = AbstractDecaParser;

    // Use the vocabulary generated by the accompanying
    // lexer. Maven knows how to work out the relationship
    // between the lexer and parser and will build the
    // lexer before the parser. It will also rebuild the
    // parser if the lexer changes.
    //
    tokenVocab = DecaLexer;

}

// which packages should be imported?
// on a ajouté des packages içi.
@header {
    import fr.ensimag.deca.tree.*;
    import fr.ensimag.deca.tree.MethodCall;
    import fr.ensimag.deca.tree.Selection;
    import java.io.PrintStream;
    import fr.ensimag.deca.tools.SymbolTable;
    import fr.ensimag.deca.tools.SymbolTable.Symbol;
    import fr.ensimag.deca.context.*;
    import fr.ensimag.ima.pseudocode.Label;
    import java.util.List;
    import java.util.Arrays;
    import java.util.ArrayList;
}

@members {
    // on a écrit symboleTable içi pour qu'il soit initialisé une seule fois.
    SymbolTable symbolTable = new SymbolTable();
    // on initialize l'index de la méthode par 0
    int indexMethod = 0;
    @Override
    protected AbstractProgram parseProgram() {
        return prog().tree;
    }
}

prog returns[AbstractProgram tree]
    : list_classes main EOF {
            assert($main.tree != null);
            $tree = new Program($list_classes.tree, $main.tree);
            setLocation($tree, $list_classes.start);
        }
    ;

main returns[AbstractMain tree]
    : /* epsilon */ {
            $tree = new EmptyMain();
        }
    | block {
            $tree = new Main($block.decls, $block.insts);
            setLocation($tree, $block.start);
        }
    ;

block returns[ListDeclVar decls, ListInst insts]
    : OBRACE list_decl list_inst CBRACE {
            $decls = $list_decl.tree;
            $insts = $list_inst.tree;
            setLocation($decls, $OBRACE);
            setLocation($insts, $OBRACE);
        }
    ;

list_decl returns[ListDeclVar tree]
@init   {
            $tree = new ListDeclVar();
        }
    : decl_var_set[$tree]*
    ;

decl_var_set[ListDeclVar l]
    : type taille list_decl_var[$l,$type.tree, $taille.tree] SEMI
    ;

// Retourne la taille {null, ou unes liste}
taille returns[ListExpr tree]
@init{
    $tree = new ListExpr();
}
    :(
        OBRACKET  CBRACKET{
            $tree.add(new IntLiteral(0));
        }
    )*
;

dim returns[ListExpr tree]
@init{
    $tree = new ListExpr();
}   :OBRACKET expr CBRACKET{
            $tree.add($expr.tree);
    }(
        :OBRACKET expr  CBRACKET{
            $tree.add($expr.tree);
        }
    )*
;

list_decl_var[ListDeclVar l, AbstractIdentifier t, ListExpr ListTaille]
    : dv1=decl_var[$t, ListTaille] {
        $l.add($dv1.tree);
        }
      (COMMA dv2=decl_var[$t, ListTaille] {
          $l.add($dv2.tree); // Ajout de la variable à la liste
        }
      )*
    ;

decl_var[AbstractIdentifier t, ListExpr ListTaille] returns[AbstractDeclVar tree]
    @init {
        AbstractExpr exp = null;
    }
    : i=ident
      (EQUALS e=expr {
            exp = $e.tree;
      }
      )? {
          assert($ident.tree != null);
          if (exp != null){
                Initialization initialization = new Initialization(exp);
                setLocation(initialization, $expr.start);
                $tree = new DeclVar($t, $ident.tree, initialization, ListTaille);
          }else{
                NoInitialization noInitialization = new NoInitialization();
                setLocation(noInitialization, $ident.start);
                $tree = new DeclVar($t, $ident.tree, noInitialization, ListTaille);
          }
          setLocation($tree, $ident.start);
      }
    ;


list_inst returns[ListInst tree]
@init {
    $tree=new ListInst();
}
    : (inst {
        $tree.add($inst.tree);
        }
      )*
    ;

inst returns[AbstractInst tree]
    : e1=expr SEMI {
            assert($e1.tree != null);
            $tree=$e1.tree;
            setLocation($tree, $e1.start);
        }
    | SEMI {
            $tree=new NoOperation();
            setLocation($tree,$SEMI);
        }
    | PRINT OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree=new Print(false,$list_expr.tree);
            setLocation($tree,$PRINT); 
        }
    | PRINTLN OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree=new Println(false,$list_expr.tree);
            setLocation($tree,$PRINTLN); 
        }
    | PRINTX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree=new Print(true,$list_expr.tree);
            setLocation($tree,$PRINTX); 
        }
    | PRINTLNX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree=new Println(true,$list_expr.tree);
            setLocation($tree,$PRINTLNX); 
        }
    | if_then_else {
            assert($if_then_else.tree != null);
            $tree = $if_then_else.tree;
            setLocation($tree, $if_then_else.start);
        }
    | WHILE OPARENT condition=expr CPARENT OBRACE body=list_inst CBRACE {
            assert($condition.tree != null);
            assert($body.tree != null);
            $tree = new While($condition.tree, $body.tree);
            setLocation($tree, $WHILE);
        }
    | RETURN expr SEMI {
            assert($expr.tree != null);
            $tree =  new Return($expr.tree);
            setLocation($tree, $RETURN);
        }
    ;

// À FAIRE : vérifier si cette grammaire est correcte
if_then_else returns [IfThenElse tree]
@init {
    AbstractExpr conditionIf = null;
    IfThenElse sous = null;
    ListInst interIf = new ListInst();
}
    : if1=IF OPARENT condition=expr CPARENT OBRACE li_if=list_inst CBRACE {
            assert($condition.tree != null);
            assert($li_if.tree != null);
            $tree = new IfThenElse($condition.tree, $li_if.tree, interIf);
        }
      (ELSE elsif=IF OPARENT elsif_cond=expr CPARENT OBRACE elsif_li=list_inst CBRACE {
            assert($elsif_cond.tree != null);
            assert($elsif_li.tree != null);
            sous = new IfThenElse($elsif_cond.tree, $elsif_li.tree, new ListInst());
            interIf.add(sous);
            interIf = sous.getElseBranch();
            setLocation(sous, $ELSE);
        }
      )*
      (ELSE OBRACE li_else=list_inst CBRACE {
            assert($li_else.tree != null);
            if (sous != null){
                sous.setElseBranch($li_else.tree);
                setLocation($li_else.tree, $ELSE);
            }else{
                $tree.setElseBranch($li_else.tree);
                setLocation($tree, $ELSE);
            }
        }
      )?
    ;

list_expr returns[ListExpr tree]
@init   {
            $tree=new ListExpr();
        }
    : (e1=expr {
            assert($e1.tree!=null);
            $tree.add($e1.tree);
            setLocation($tree, $e1.start);
        }
       (COMMA e2=expr {
            assert($e2.tree!=null);
            $tree.add($e2.tree);
        }
       )* )?
    ;

expr returns[AbstractExpr tree]
    : e=assign_expr {
            assert($e.tree != null);
            $tree=$e.tree;
            setLocation($tree, $e.start);
        }
    ;

assign_expr returns[AbstractExpr tree]
    : e=or_expr (
        /* condition: expression e must be a "LVALUE" */ {
            if (! ($e.tree instanceof AbstractLValue)) {
                throw new InvalidLValue(this, $ctx);
            }
        }
        EQUALS e2=assign_expr {
            assert($e.tree != null);
            assert($e2.tree != null);
            $tree = new Assign((AbstractLValue) $e.tree, $e2.tree);
            setLocation($tree, $e.start);
        }
      | {
            assert($e.tree != null);
            $tree = $e.tree;
        }
      )
    ;


or_expr returns[AbstractExpr tree]
    : e=and_expr {
            assert($e.tree != null);
            $tree=$e.tree;
            setLocation($tree, $e.start);
        }
    | e1=or_expr OR e2=and_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Or($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
       }
    ;

and_expr returns[AbstractExpr tree]
    : e=eq_neq_expr {
            assert($e.tree != null);
            $tree=$e.tree;
            setLocation($tree, $e.start);
        }
    |  e1=and_expr AND e2=eq_neq_expr {
            assert($e1.tree != null);                         
            assert($e2.tree != null);
            $tree = new And($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    ;

eq_neq_expr returns[AbstractExpr tree]
    : e=inequality_expr {
            assert($e.tree != null);
            $tree=$e.tree;
            setLocation($tree, $e.start);
        }
    | e1=eq_neq_expr EQEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Equals($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=eq_neq_expr NEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new NotEquals($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    ;

inequality_expr returns[AbstractExpr tree]
    : e=sum_expr {
            assert($e.tree != null);
            $tree=$e.tree;
            setLocation($tree, $e.start);
        }
    | e1=inequality_expr LEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new LowerOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        } 
    | e1=inequality_expr GEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new GreaterOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr GT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Greater($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr LT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Lower($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=inequality_expr INSTANCEOF type {
            assert($e1.tree != null);
            assert($type.tree != null);
            $tree = new InstanceOf($e1.tree, $type.tree);
            setLocation($tree, $e1.start);
        }
    ;

sum_expr returns[AbstractExpr tree]
    : e=mult_expr {
            assert($e.tree != null);
            $tree=$e.tree;
            setLocation($tree, $e.start);
        }
    | e1=sum_expr PLUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Plus($e1.tree,$e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=sum_expr MINUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Minus($e1.tree,$e2.tree);
            setLocation($tree, $e1.start);
        }
    ;

mult_expr returns[AbstractExpr tree]
    : e=unary_expr {
            assert($e.tree != null);
            $tree=$e.tree;
            setLocation($tree, $e.start);
        }
    | e1=mult_expr TIMES e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            $tree = new Multiply($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=mult_expr SLASH e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            $tree = new Divide($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    | e1=mult_expr PERCENT e2=unary_expr {
            assert($e1.tree != null);                                                                          
            assert($e2.tree != null);
            $tree = new Modulo($e1.tree, $e2.tree);
            setLocation($tree, $e1.start);
        }
    ;

unary_expr returns[AbstractExpr tree]
    : op=MINUS e=unary_expr {
            assert($e.tree != null);
            $tree = new UnaryMinus($e.tree);
            setLocation($tree, $op);
        }
    | op=EXCLAM e=unary_expr {
            assert($e.tree != null);
            $tree = new Not($e.tree);
            setLocation($tree, $op);
        }
    | select_expr {
            assert($select_expr.tree != null);
            $tree=$select_expr.tree;
            setLocation($tree, $select_expr.start);
        }
    ;

select_expr returns [AbstractExpr tree]
    : e=primary_expr {
        assert($e.tree != null);
        $tree = $e.tree;
        setLocation($tree, $e.start);
    }
    | e1=select_expr DOT i=ident {
        assert($e1.tree != null);
        assert($i.tree != null);
    }
    (o=OPARENT args=list_expr CPARENT {
        // Cas "e1.i(args)"
        assert($args.tree != null);
        MethodCall sous = new MethodCall($e1.tree, $i.tree, $args.tree);
        $tree = sous;  
        setLocation($tree, $e1.start);
    }
    | /* epsilon */ {
        // Cas "e1.i" sans arguments
        Selection sous = new Selection($e1.tree, $i.tree);
        $tree = sous;  
        setLocation($tree, $e1.start);
    })
    | e2=table_element {
        assert($e2.tree != null);
        $tree = $e2.tree;
        setLocation($tree, $e2.start);
    }
    ;

table_element returns [AbstractExpr tree]
@init{
    ListExpr listExpr = new ListExpr();
}
    : e=ident {assert($ident.tree != null);}
    (OBRACKET e1=expr CBRACKET(
        :{
            assert($e1.tree != null);
            listExpr.add($e1.tree);
        }
    )
    )+{
        $tree = new ListElement($e.tree, listExpr);
        setLocation($tree, $e.start);
    }
    ;

primary_expr returns[AbstractExpr tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
            setLocation($tree, $ident.start);
        }
    | m=ident OPARENT args=list_expr CPARENT {
            assert($m.tree != null);
            $tree = new MethodSansThis($m.tree, $args.tree);
            setLocation($tree, $m.start);
        }
    | OPARENT expr CPARENT {
            assert($expr.tree != null);
            $tree = $expr.tree;
            setLocation($tree, $OPARENT);
        }
    | READINT OPARENT CPARENT {
            $tree = new ReadInt();
            setLocation($tree, $READINT);
        }
    | READFLOAT OPARENT CPARENT {
            $tree = new ReadFloat();
            setLocation($tree, $READFLOAT);
        }
    | NEW ident{assert($ident.tree != null);} 
        (
            :OPARENT CPARENT {  
                $tree = new New($ident.tree);
            }
            |dim{
                assert($dim.tree != null);
                TableAllocation sous = new TableAllocation($ident.tree, $dim.tree);
                $tree = sous;
            }
        ){
            setLocation($tree, $NEW);
        }
    | cast=OPARENT type CPARENT OPARENT expr CPARENT {
            assert($type.tree != null);
            assert($expr.tree != null);
            $tree = new TypeCasting($type.tree, $expr.tree);
            setLocation($tree, $OPARENT);
        }
    | literal {
            assert($literal.tree != null);
            $tree=$literal.tree;
            setLocation($tree, $literal.start);
        }
    | tableau_literal{ 
            assert($tableau_literal.tree != null);
            $tree = $tableau_literal.tree;
            setLocation($tree, $tableau_literal.start);
        }
    ;

tableau_literal returns[AbstractExpr tree]
@init{ 
    IntTableLiteral sousInt = new IntTableLiteral() ;
    FloatTableLiteral sousFloat = new FloatTableLiteral() ;
    StringTableLiteral sousString = new StringTableLiteral() ;
    BooleanTableLiteral sousBoolean = new BooleanTableLiteral();
    ListExpr tailleExpr = new ListExpr();
}
    :OBRACKET( 
    :tableau_Integer[sousInt]{
        $tree = sousInt;
        for (int i : $tableau_Integer.return_taille_list){
            tailleExpr.add(new IntLiteral(i));
        }
        sousInt.setTaille(tailleExpr);
        setLocation($tree,$tableau_Integer.start);
    }
    |tableau_float[sousFloat]{
        $tree = sousFloat;
        for (int i : $tableau_float.return_taille_list){
            tailleExpr.add(new IntLiteral(i));
        }
        sousFloat.setTaille(tailleExpr);
        setLocation($tree,$tableau_float.start);
    }
    | tableau_boolean[sousBoolean]{
        $tree = sousBoolean;
        for (int i : $tableau_boolean.return_taille_list){
            tailleExpr.add(new IntLiteral(i));
        }
        sousBoolean.setTaille(tailleExpr);
        setLocation($tree,$tableau_boolean.start);
    }
    )CBRACKET
;

tableau_Integer [IntTableLiteral tree] returns [List<Integer> return_taille_list]
@init {
    $return_taille_list = new ArrayList<>(Arrays.asList(0));
    IntLiteral number;
}
    : OBRACKET e1=tableau_Integer[$tree] CBRACKET {
        assert($e1.return_taille_list != null);
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
        $return_taille_list.addAll($e1.return_taille_list);

    } (COMMA OBRACKET e2=tableau_Integer[$tree] CBRACKET {
        assert($e2.return_taille_list != null);
        assert($e1.return_taille_list.equals($e2.return_taille_list));
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
    })*
    | INT {
        number = new IntLiteral(Integer.parseInt($INT.text));
        $tree.addLiteral(number);
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
        setLocation($tree, $INT);
        setLocation(number, $INT);
       
    } (COMMA INT {
        number = new IntLiteral(Integer.parseInt($INT.text));
        $tree.addLiteral(number);
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
        setLocation(number, $INT);
    })* 
;

tableau_float [FloatTableLiteral tree] returns [List<Integer> return_taille_list]
@init {
    $return_taille_list = new ArrayList<>(Arrays.asList(0));
    FloatLiteral number;
}
    : OBRACKET e1=tableau_float[$tree] CBRACKET {
        assert($e1.return_taille_list != null);
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
        $return_taille_list.addAll($e1.return_taille_list);

    } (COMMA OBRACKET e2=tableau_float[$tree] CBRACKET {
        assert($e2.return_taille_list != null);
        assert($e1.return_taille_list.equals($e2.return_taille_list));
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
    })*
    | FLOAT {
        number = new FloatLiteral(Float.parseFloat($FLOAT.text));
        $tree.addLiteral(number);
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
        setLocation($tree, $FLOAT);
        setLocation(number, $FLOAT);
       
    } (COMMA FLOAT {
        number = new FloatLiteral(Float.parseFloat($FLOAT.text));
        $tree.addLiteral(number);
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
        setLocation(number, $FLOAT);
    })* 
;

tableau_boolean [BooleanTableLiteral tree] returns [List<Integer> return_taille_list]
@init {
    $return_taille_list = new ArrayList<>(Arrays.asList(0));
    BooleanLiteral str;
}
    : OBRACKET e1=tableau_boolean[$tree] CBRACKET {
        assert($e1.return_taille_list != null);
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
        $return_taille_list.addAll($e1.return_taille_list);

    } (COMMA OBRACKET e2=tableau_boolean[$tree] CBRACKET {
        assert($e2.return_taille_list != null);
        assert($e1.return_taille_list.equals($e2.return_taille_list));
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
    })*
    | (TRUE  {
        str = new BooleanLiteral(Boolean.parseBoolean($TRUE.text));
        $tree.addLiteral(str);
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
        setLocation(str, $TRUE);
    }| FALSE  {
        str = new BooleanLiteral(Boolean.parseBoolean($FALSE.text));
        $tree.addLiteral(str);
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
        setLocation(str, $FALSE);
    } 
    )
    (COMMA (TRUE  {
        str = new BooleanLiteral(Boolean.parseBoolean($TRUE.text));
        $tree.addLiteral(str);
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
        setLocation(str, $TRUE);
    }|FALSE  {
        str = new BooleanLiteral(Boolean.parseBoolean($FALSE.text));
        $tree.addLiteral(str);
        $return_taille_list.set(0, $return_taille_list.get(0) + 1);
        setLocation(str, $FALSE);
    } 
    ))* 
;

type returns[AbstractIdentifier tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
            setLocation($tree, $ident.start);
        }
    ;

literal returns[AbstractExpr tree]
    : INT {
        $tree=new IntLiteral(Integer.parseInt($INT.text));
        setLocation($tree,$INT);
        }
    | FLOAT {
        $tree=new FloatLiteral(Float.parseFloat($FLOAT.text));
        setLocation($tree,$FLOAT);
        }
    | STRING {
        $tree=new StringLiteral($STRING.text.substring(1,$STRING.text.length()-1));
        setLocation($tree,$STRING);
        }
    | TRUE {
        $tree=new BooleanLiteral(Boolean.parseBoolean($TRUE.text));
        setLocation($tree,$TRUE);
        }
    | FALSE {
        $tree=new BooleanLiteral(Boolean.parseBoolean($FALSE.text));
        setLocation($tree,$FALSE);
        }
    | THIS {
        $tree=new ThisLiteral();
        setLocation($tree,$THIS);
        }
    | NULL {
        $tree=new NullLiteral();
        setLocation($tree,$NULL);
        }
    ;

ident returns[AbstractIdentifier tree]
// on reconstruit à chaque fois un SymbolTable.
    : IDENT {
        $tree = new Identifier(symbolTable.create($IDENT.text));
        setLocation($tree, $IDENT);
    }
    ;

/****     Class related rules     ****/

list_classes returns[ListDeclClass tree]
    @init {
        $tree = new ListDeclClass();
    }
    : (c1=class_decl {
            assert($c1.tree != null);
            $tree.add($c1.tree);
            setLocation($tree, $c1.start);
        }
      )*
    ;

class_decl returns [AbstractDeclClass tree]
    : CLASS name=ident superclass=class_extension OBRACE class_body CBRACE {
            assert($name.tree != null);
            $tree = new DeclClass($name.tree, $superclass.tree,$class_body.treemethod, $class_body.treefield, tokenLocation($CLASS));
            setLocation($tree, $CLASS);
        }
    ;

class_extension returns[AbstractIdentifier tree]
    : EXTENDS ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
            setLocation($tree, $ident.start);
        }
    | /* epsilon */ {
            $tree = null;  
        }
    ;

class_body returns [ListDeclFieldSet treefield, ListDeclMethod treemethod]
    : { 
        $treefield = new ListDeclFieldSet();
        $treemethod = new ListDeclMethod();
    }
    (m=decl_method {
            assert($m.tree != null);
            $treemethod.add($m.tree);
            setLocation($treemethod, $m.start);
        }
      | f=decl_field_set {
            assert($f.tree != null);
            $treefield.add($f.tree);
            setLocation($treefield, $f.start);
      }
      )*
    ;

// ty : type
// names : ListExpr qui contient les noms de chaque attribut dans la méme ligne.
// inits : Liste qui contient les initialisations de chaqu'une des attributs.
decl_field_set returns[DeclFieldSet tree]
    : v=visibility (
        :t=type taille l=list_decl_field SEMI {
            assert($t.tree != null);
            assert($list_decl_field.tree != null);
            $tree = new DeclFieldSet($v.tree, $t.tree, $list_decl_field.tree, $taille.tree);
            setLocation($tree, $v.start);
        }
        )
    ;

visibility returns [Visibility tree]
    : /* epsilon */ {
            $tree = Visibility.PUBLIC;  
        }
    | PROTECTED {
            $tree = Visibility.PROTECTED;
        }
    ;

list_decl_field returns[ListDeclField tree]
@init {
    $tree = new ListDeclField();
    DeclField sous = null;
}
    : dv1=decl_field {
            assert($dv1.name != null);
            assert($dv1.init != null);
            sous = new DeclField($dv1.name, $dv1.init);  
            $tree.add(sous);
            setLocation(sous, $dv1.start);
        }
      (COMMA dv2=decl_field {
            assert($dv2.name != null);
            assert($dv2.init != null);
            sous = new DeclField($dv2.name, $dv2.init);  
            $tree.add(sous);
            setLocation(sous, $dv2.start);
        }
      )*
    ;

decl_field returns [AbstractIdentifier name, AbstractInitialization init]
    : i=ident {
            assert($i.tree != null);
            $name = $i.tree;
            $init = new NoInitialization();
            setLocation($name, $i.start);
            setLocation($init, $i.start);
        }
      (EQUALS e=expr {
            if ($e.tree != null){
                $init = new Initialization($e.tree);
                setLocation($init, $EQUALS);
            }
        }
      )?
    ;

decl_method returns [DeclMethod tree]
@init{
    AbstractMethodBody body;
}
    : type taille ident OPARENT params=list_params CPARENT 
        (block {
            assert($type.tree != null);
            assert($ident.tree != null);
            body = new MethodBody($block.decls, $block.insts);
            $tree = new DeclMethod($type.tree, $taille.tree, $ident.tree, $params.tree ,tokenLocation($type.start),  body ,indexMethod);
            setLocation(body, $block.start);
          }
        | ASM OPARENT code=multi_line_string CPARENT SEMI {
            StringLiteral multiString = new StringLiteral($code.text.substring(1, $code.text.length() - 1));
            body = new MethodAsmBody(multiString);
            $tree = new DeclMethod($type.tree, $taille.tree, $ident.tree, $params.tree ,tokenLocation($type.start),  body ,indexMethod);
            setLocation(multiString, $code.start);
            setLocation(body, $ASM);

          }
        ){
            indexMethod++;
            setLocation($tree, $type.start);
        }
    ;

list_params returns [ListDeclParam tree]
@init {
    $tree = new ListDeclParam();
}
    : (p1=param {
            assert($p1.tree != null);
            $tree.add($p1.tree);
            setLocation($tree, $p1.start);
        } 
      (COMMA p2=param {
            assert($p2.tree != null);
            $tree.add($p2.tree);
        }
      )*)?
    ;

multi_line_string returns[String text, Location location]
    : s=STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    | s=MULTI_LINE_STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    ;

param returns [DeclParam tree ]
    : type taille ident{
            assert($type.tree != null);
            assert($ident.tree != null);
            $tree =new DeclParam($type.tree,$taille.tree ,$ident.tree);
            setLocation($tree, $type.start);
        }
    ;